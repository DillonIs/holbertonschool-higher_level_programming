# The ''1-my_list.py'' module
=============================
Usage of 1-my_list.py
=============================

Only one function is present and is defined as ''print_sorted()''

''print_sorted'' returns a list in ascending order and assumes
that all elements in the list are integers

Add the function by:
    >>> MyList = __import__('1-my_list').MyList

Test for when MyList is a subclass and/or instance of list
    >>> my_list = MyList()
    >>> issubclass(MyList, list)
    True

    >>> my_list = MyList()
    >>> isinstance(my_list, list)
    True

Test when 'print_sorted' is an attribute of MyList
    >>> my_list = MyList()
    >>> 'print_sorted' in dir(MyList)
    True

Testing a list of positive integers
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Testing a list of repeated integers
    >>> my_list = MyList()
    >>> my_list.append(9)
    >>> my_list.append(9)
    >>> my_list.append(9)
    >>> my_list.append(9)
    >>> my_list.append(9)
    >>> my_list.print_sorted()
    [9, 9, 9, 9, 9]

Testing a list of negative integers
    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(-4)
    >>> my_list.append(-2)
    >>> my_list.append(-3)
    >>> my_list.append(-5)
    >>> my_list.print_sorted()
    [-5, -4, -3, -2, -1]

Testing a list of both negative and positive integers
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(-2)
    >>> my_list.append(3)
    >>> my_list.append(-5)
    >>> my_list.print_sorted()
    [-5, -2, 1, 3, 4]

Testing a list with only one integer
    >>> my_list = MyList()
    >>> my_list.append(9)
    >>> my_list.print_sorted()
    [9]

    >>> my_list = MyList()
    >>> my_list += [7]
    >>> my_list.print_sorted()
    [7]

Testing a list of positive string integers
    >>> my_list = MyList()
    >>> my_list.append("-1")
    >>> my_list.append("-4")
    >>> my_list.append("-2")
    >>> my_list.append("-3")
    >>> my_list.append("-5")
    >>> my_list.print_sorted()
    ['-1', '-2', '-3', '-4', '-5']

Testing a list of positive and negative string integers
    >>> my_list = MyList()
    >>> my_list.append("-1")
    >>> my_list.append("4")
    >>> my_list.append("-2")
    >>> my_list.append("3")
    >>> my_list.append("-5")
    >>> my_list.print_sorted()
    ['-1', '-2', '-5', '3', '4']

Testing a list of positive characters
    >>> my_list = MyList()
    >>> my_list.append('j')
    >>> my_list.append('c')
    >>> my_list.append('z')
    >>> my_list.append('g')
    >>> my_list.append('a')
    >>> my_list.print_sorted()
    ['a', 'c', 'g', 'j', 'z']

Testing a list of negative characters
    >>> my_list = MyList()
    >>> my_list.append('-j')
    >>> my_list.append('-c')
    >>> my_list.append('-z')
    >>> my_list.append('-g')
    >>> my_list.append('-a')
    >>> my_list.print_sorted()
    ['-a', '-c', '-g', '-j', '-z']

Testing a list of positive and negative characters
    >>> my_list = MyList()
    >>> my_list.append('j')
    >>> my_list.append('-c')
    >>> my_list.append('z')
    >>> my_list.append('-g')
    >>> my_list.append('-a')
    >>> my_list.print_sorted()
    ['-a', '-c', '-g', 'j', 'z']

Testing an empty list
    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Passing more than one argument to sort method
    >>> my_list = MyList()
    >>> my_list.print_sorted([1, 2])
    Traceback (most recent call last):
    	...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

    >>> my_list = MyList()
    >>> my_list.print_sorted([1, 2], [3, 4])
    Traceback (most recent call last):
    	...
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Test the type of the print_sorted method.
    >>> my_list = MyList()
    >>> type(my_list.print_sorted)
    <class 'method'>

Testing to see the printable string.
    >>> my_list = MyList()
    >>> my_list.append(7)
    >>> print(my_list)
    [7]

Testing to see if print_sorted() returns a new list
    >>> my_list = MyList()
    >>> my_list.append(7)
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.print_sorted()
    [1, 2, 7]
    >>> my_list
    [7, 1, 2]